<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.poem.lld.mapper.PoemMapper">
	<cache />
	<resultMap type="com.poem.lld.model.Poem" id="poemLazyMap">
		<id column="id" property="id" />
		<result column="title" property="title" />
		<result column="content" property="content" />
		<result column="album" property="album" />
		<result column="type" property="type" />
		<result column="url" property="url" />
		<result column="author" property="author" />
		<result column="dynasty" property="dynasty" />
		<result column="public_degree" property="publicDegree" />
		<result column="author_id" property="authorId" />

		<association property="authorEntity" javaType="com.poem.lld.model.Author" select="findAuthorById" column="author_id" />
	</resultMap>

	<select id="getPoemById" parameterType="int" resultMap="poem.poemMap">
		select * from poem where id=#{id}
	</select>

	<select id="findPoemByAuthor" parameterType="java.lang.String" resultMap="poem.poemMap">
		select * from poem where author LIKE '%${value}%'
	</select>

	<select id="queryPoem" parameterType="poemCriteria" resultMap="poem.poemMap">
		select * from poem
		<where>
			<if test="author != null and author != ''">
				and author like '%${author}%'
			</if>
			<if test="content != null and content != ''">
				and content like '%${content}%'
			</if>
			<if test="author != null and author != ''">
				and title like '%${title}%'
			</if>
			<if test="types != null">
				<foreach collection="types" item="type" open="and type in (" close=")" separator=", ">
					#{type}
				</foreach>
			</if>
		</where>
	</select>

	<insert id="insertPoem" parameterType="com.poem.lld.model.Poem">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select last_insert_rowid() from poem limit 1
		</selectKey>
		insert into poem (title, author, content, album, `type`, url, public_degree, dynasty)
		values(#{title}, #{author}, #{content}, #{album}, #{type}, #{url}, #{publicDegree}, #{dynasty})
	</insert>

	<delete id="deletePoem" parameterType="java.lang.Integer">
		delete from poem where id=#{id}
	</delete>

	<update id="updatePoem" parameterType="com.poem.lld.model.Poem">
		update poem
		set title = #{title}, author = #{author}, content = #{content}, album = #{album},
			`type` = #{type}, url = #{url}, public_degree = #{publicDegree}, dynasty = #{dynasty} 
		where id=#{id}
	</update>
	
	<select id="searchFullPoem" parameterType="poemCriteria" resultMap="poem.poemMap">
		select a.id author_id, a.name, a.dynasty, b.*
		from author a, poem b
		<where>
			a.id = b.author_id
			<if test="author != null and author != ''">
				and a.name like '%${author}%'
			</if>
			<if test="content != null and content != ''">
				and b.content like '%${content}%'
			</if>
			<if test="author != null and author != ''">
				and b.title like '%${title}%'
			</if>
			<if test="types != null">
				<foreach collection="types" item="type" open="and b.type in (" close=")" separator=", ">
					#{type}
				</foreach>
			</if>
		</where>
	</select>

	<select id="searchPoemLazy" parameterType="string" resultMap="poem.poemMap">
		select a.id author_id, a.name, a.dynasty, b.id, b.title, b.content
		from author a, poem b
		where a.name like '%${value}%' and a.id = b.author_id 
	</select>

	<select id="searchAuthor" parameterType="string" resultMap="poem.authorMap">
		select a.id author_id, a.name, a.dynasty, b.id, b.title, b.content
		from author a, poem b
		where a.name like '%${value}%' and a.id = b.author_id 
	</select>

	<select id="getPoemByIdLazy" parameterType="int" resultMap="poemLazyMap">
		select * from poem where id=#{id}
	</select>
	
	<select id="findAuthorById" parameterType="int" resultType="com.poem.lld.model.Author">
		select * from author where id = #{id}
	</select>
</mapper>
